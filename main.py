from contextlib import contextmanager
import os
import subprocess
import time

class Bcolors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    RED = '\033[31m'
    YELLOW = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    BGRED = '\033[41m'
    WHITE = '\033[37m'

def logo():
    print(Bcolors.RED + Bcolors.BOLD)
    logo = """

⠀⠀⠀⠀⠀⣀⣠⠤⠶⠶⣖⡛⠛⠿⠿⠯⠭⠍⠉⣉⠛⠚⠛⠲⣄⠀⠀⠀⠀⠀
⠀⠀⢀⡴⠋⠁⠀⡉⠁⢐⣒⠒⠈⠁⠀⠀⠀⠈⠁⢂⢅⡂⠀⠀⠘⣧⠀⠀⠀⠀
⠀⠀⣼⠀⠀⠀⠁⠀⠀⠀⠂⠀⠀⠀⠀⢀⣀⣤⣤⣄⡈⠈⠀⠀⠀⠘⣇⠀⠀⠀
⢠⡾⠡⠄⠀⠀⠾⠿⠿⣷⣦⣤⠀⠀⣾⣋⡤⠿⠿⠿⠿⠆⠠⢀⣀⡒⠼⢷⣄⠀
⣿⠊⠊⠶⠶⢦⣄⡄⠀⢀⣿⠀⠀⠀⠈⠁⠀⠀⠙⠳⠦⠶⠞⢋⣍⠉⢳⡄⠈⣧
⢹⣆⡂⢀⣿⠀⠀⡀⢴⣟⠁⠀⢀⣠⣘⢳⡖⠀⠀⣀⣠⡴⠞⠋⣽⠷⢠⠇⠀⣼
⠀⢻⡀⢸⣿⣷⢦⣄⣀⣈⣳⣆⣀⣀⣤⣭⣴⠚⠛⠉⣹⣧⡴⣾⠋⠀⠀⣘⡼⠃
⠀⢸⡇⢸⣷⣿⣤⣏⣉⣙⣏⣉⣹⣁⣀⣠⣼⣶⡾⠟⢻⣇⡼⠁⠀⠀⣰⠋⠀⠀
⠀⢸⡇⠸⣿⡿⣿⢿⡿⢿⣿⠿⠿⣿⠛⠉⠉⢧⠀⣠⡴⠋⠀⠀⠀⣠⠇⠀⠀⠀
⠀⢸⠀⠀⠹⢯⣽⣆⣷⣀⣻⣀⣀⣿⣄⣤⣴⠾⢛⡉⢄⡢⢔⣠⠞⠁⠀⠀⠀⠀
⠀⢸⠀⠀⠀⠢⣀⠀⠈⠉⠉⠉⠉⣉⣀⠠⣐⠦⠑⣊⡥⠞⠋⠀⠀⠀⠀⠀⠀⠀
⠀⢸⡀⠀⠁⠂⠀⠀⠀⠀⠀⠀⠒⠈⠁⣀⡤⠞⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠙⠶⢤⣤⣤⣤⣤⡤⠴⠖⠚⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

    # v1.0.0 #
       >> POLAT <<
       >> 2/12/2023 <<

    """
    print(logo)
    print(Bcolors.ENDC)

@contextmanager
def file_manager(path, methods, encoding):
    try:
        file = open(path, methods, encoding=encoding)
        yield file
    finally:
        file.close()

class DNSManager:
    def __init__(self, file_path, new_permissions, new_dns_addresses):
        self.file_path = file_path
        self.new_permissions = new_permissions
        self.new_dns_addresses = new_dns_addresses

    def change_permissions(self):
        try:
            print(Bcolors.RED + "Changing File Permissions...." + Bcolors.ENDC)
            os.chmod(self.file_path, self.new_permissions)
            time.sleep(5)
            print(Bcolors.GREEN + f"Permissions of {self.file_path} successfully changed!" + Bcolors.ENDC)
        except OSError as e:
            print(Bcolors.RED + f"An error occurred: {e} " + Bcolors.ENDC)

    def change_dns_addresses(self):
        print(Bcolors.RED + "Changing DNS Addresses..." + Bcolors.ENDC)
        time.sleep(4)

        with file_manager(self.file_path, "r+", "UTF-8") as file:
            file.write("# Generated by NetworkManager\n")
            for address in self.new_dns_addresses:
                file.write(f"nameserver {address}\n")

        with file_manager(self.file_path, "r+", "UTF-8") as file:
            lines = file.readlines()
            for i in range(1, min(len(lines), len(self.new_dns_addresses) + 1)):
                content = lines[i].strip()
                print(Bcolors.GREEN + f"NEW DNS ADDRESS: {content}" + Bcolors.ENDC)

def setup_torghost():
    current_directory_torghost = os.getcwd()
    folder_name_torghost = "TorGhost"
    path_torghost = os.path.join(current_directory_torghost, folder_name_torghost)

    print(Bcolors.RED +"Entering Tor Network" + Bcolors.ENDC)
    time.sleep(2)

    if os.path.exists(path_torghost):
        subprocess.run(["torghost", "-a"])
    else:
        subprocess.run(["git", "clone", "https://github.com/databurn-in/TorGhost.git"])
        subprocess.run(["chmod", "+x", "TorGhost/build.sh"])
        subprocess.run(["bash", "TorGhost/build.sh"])
        subprocess.run(["torghost", "-a"])

def setup_torbrowser():
    current_directory_torbrowser = "/root/.local/share/"
    folder_name_torbrowser = "torbrowser"
    path_torbrowser = os.path.join(current_directory_torbrowser, folder_name_torbrowser)

    print(Bcolors.RED +"Opening Tor Browser" + Bcolors.ENDC)
    time.sleep(2)

    if os.path.exists(path_torbrowser):
        subprocess.run(["torbrowser-launcher"])
    else:
        subprocess.run(["apt", "install", "torbrowser-launcher", "-y"])
        subprocess.run(["torbrowser-launcher"])

if __name__ == "__main__":
    logo()
    file_path = "/etc/resolv.conf"
    new_permissions = 0o644
    new_dns_addresses = ["1.1.1.1", "1.0.0.1"]

    dns_manager = DNSManager(file_path, new_permissions, new_dns_addresses)

    dns_manager.change_permissions()
    print("\n")
    dns_manager.change_dns_addresses()
    print("\n")

    setup_torghost()
    print("\n")
    setup_torbrowser()
